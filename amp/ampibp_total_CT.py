from __future__ import division
import vegas
import numpy as np
import cmath as cm
import sys
import gvar as gv
from auxiliary import *
from mpmath import *
from ctypes import *
import pyslha

islha_obj = pyslha.read(sys.argv[1])
lam = islha_obj.blocks["IBPPARA"][1]
mA = islha_obj.blocks["MASS"][1] + complex(0.,0.)
mt = islha_obj.blocks["MASS"][2]*np.sqrt(1. - complex(0., lam))
mtmsbar = islha_obj.blocks["MASS"][3]
mG = islha_obj.blocks["MASS"][4] + complex(0.,0.)
msq1 = islha_obj.blocks["MASS"][5]*np.sqrt(1. - complex(0., lam))
msq2 = islha_obj.blocks["MASS"][6]*np.sqrt(1. - complex(0., lam))
mu = islha_obj.blocks["REAL"][1]
At = islha_obj.blocks["REAL"][2] + complex(0.,0.)
beta = islha_obj.blocks["REAL"][3]
t = islha_obj.blocks["REAL"][4]
a = islha_obj.blocks["REAL"][5]
b = islha_obj.blocks["REAL"][6]

def ibpftotal(reim):
	if reim == 0:
		return (((0. - 0.01688686394038963*np.complex(0.,1.))*(np.complex(0.,1.)*mt**3*(np.pi + np.complex(0.,1.)*np.log((1 + np.sqrt(1 - (4*mt**2)/mA**2))/(1 - np.sqrt(1 - (4*mt**2)/mA**2))))*(2 + np.complex(0.,1.)*np.sqrt(1 - (4*mt**2)/mA**2)*np.pi - np.sqrt(1 - (4*mt**2)/mA**2)*np.log((1 + np.sqrt(1 - (4*mt**2)/mA**2))/(1 - np.sqrt(1 - (4*mt**2)/mA**2))))*(-((mG**2 - msq1**2 + mt**2)*((mG**2 - msq1**2)*mtmsbar + mt**2*(-4*a*b*mG + mtmsbar))*np.pi**2*np.log(mG**2/msq1**2)) + np.pi**2*(-((mG**2 - msq2**2 + mt**2)*((mG**2 - msq2**2)*mtmsbar + mt**2*(4*a*b*mG + mtmsbar))*np.log(mG**2/msq2**2)) + 2*np.sqrt((mG**2 - msq1**2)**2 - 2*(mG**2 + msq1**2)*mt**2 + mt**4)*((mG**2 - msq1**2)*mtmsbar + mt**2*(-4*a*b*mG + mtmsbar))*np.log((mG**2 + msq1**2 - mt**2 + np.sqrt((mG**2 - msq1**2)**2 - 2*(mG**2 + msq1**2)*mt**2 + mt**4))/(2*mG*msq1)) + 2*(np.sqrt((mG**2 - msq2**2)**2 - 2*(mG**2 + msq2**2)*mt**2 + mt**4)*((mG**2 - msq2**2)*mtmsbar + mt**2*(4*a*b*mG + mtmsbar))*np.log((mG**2 + msq2**2 - mt**2 + np.sqrt((mG**2 - msq2**2)**2 - 2*(mG**2 + msq2**2)*mt**2 + mt**4))/(2*mG*msq2)) + mt**2*(2*mG**2*mtmsbar - msq1**2*mtmsbar - msq2**2*mtmsbar + 4*mt**2*mtmsbar + 4*np.euler_gamma*mt**2*mtmsbar + mt**2*mtmsbar*np.log(16) - mt**2*mtmsbar*np.log(4096) - 2*(mG**2 + 2*mt**2)*mtmsbar*np.log(mu**2/mG**2) - 4*a*b*mG*mt**2*np.log(mu**2/msq1**2) + mG**2*mtmsbar*np.log(mu**2/msq1**2) + mt**2*mtmsbar*np.log(mu**2/msq1**2) + 4*a*b*mG*mt**2*np.log(mu**2/msq2**2) + mG**2*mtmsbar*np.log(mu**2/msq2**2) + mt**2*mtmsbar*np.log(mu**2/msq2**2) - 2*mt**2*mtmsbar*np.log(mu**2/mt**2) - 4*mt**2*mtmsbar*np.log(np.pi))))) + mt**4*mtmsbar*np.pi**2*(-(mA**2*mt*np.sqrt(1 - (4*mt**2)/mA**2)*(-1 + np.sqrt(1 - (4*mt**2)/mA**2))*(1 + np.sqrt(1 - (4*mt**2)/mA**2))*(np.pi + np.complex(0.,1.)*np.log((1 + np.sqrt(1 - (4*mt**2)/mA**2))/(1 - np.sqrt(1 - (4*mt**2)/mA**2))))**2) + 4*mt**3*(np.pi + np.complex(0.,1.)*np.log((1 + np.sqrt(1 - (4*mt**2)/mA**2))/(1 - np.sqrt(1 - (4*mt**2)/mA**2))))*(-2*np.complex(0.,1.) + np.sqrt(1 - (4*mt**2)/mA**2)*np.pi + np.complex(0.,1.)*np.sqrt(1 - (4*mt**2)/mA**2)*np.log((1 + np.sqrt(1 - (4*mt**2)/mA**2))/(1 - np.sqrt(1 - (4*mt**2)/mA**2))))*(2*np.euler_gamma - np.log(mu**2/mG**2) - np.log((16*mu**2)/mt**2) - 2*np.log(np.pi)) + 8*mt**3*(np.log((2*np.sqrt(1 - (4*mt**2)/mA**2))/(-1 + np.sqrt(1 - (4*mt**2)/mA**2)))**2 - np.log((2*np.sqrt(1 - (4*mt**2)/mA**2))/(1 + np.sqrt(1 - (4*mt**2)/mA**2)))**2 - polylog2((1 - np.sqrt(1 - (4*mt**2)/mA**2))/(1 + np.sqrt(1 - (4*mt**2)/mA**2))) + polylog2((1 + np.sqrt(1 - (4*mt**2)/mA**2))/(1 - np.sqrt(1 - (4*mt**2)/mA**2)))) + 2*mA**2*mt*np.sqrt(1 - (4*mt**2)/mA**2)*(-1 + np.sqrt(1 - (4*mt**2)/mA**2))*(1 + np.sqrt(1 - (4*mt**2)/mA**2))*(np.log((2*np.sqrt(1 - (4*mt**2)/mA**2))/(1 + np.sqrt(1 - (4*mt**2)/mA**2)))**2*np.log((1 - np.sqrt(1 - (4*mt**2)/mA**2))/(1 + np.sqrt(1 - (4*mt**2)/mA**2))) + np.log((2*np.sqrt(1 - (4*mt**2)/mA**2))/(-1 + np.sqrt(1 - (4*mt**2)/mA**2)))**2*np.log((1 + np.sqrt(1 - (4*mt**2)/mA**2))/(1 - np.sqrt(1 - (4*mt**2)/mA**2))) + 2*np.log((2*np.sqrt(1 - (4*mt**2)/mA**2))/(-1 + np.sqrt(1 - (4*mt**2)/mA**2)))*polylog2((2*np.sqrt(1 - (4*mt**2)/mA**2))/(-1 + np.sqrt(1 - (4*mt**2)/mA**2))) + 2*np.log((2*np.sqrt(1 - (4*mt**2)/mA**2))/(1 + np.sqrt(1 - (4*mt**2)/mA**2)))*polylog2((2*np.sqrt(1 - (4*mt**2)/mA**2))/(1 + np.sqrt(1 - (4*mt**2)/mA**2))) - 2*polylog3((2*np.sqrt(1 - (4*mt**2)/mA**2))/(-1 + np.sqrt(1 - (4*mt**2)/mA**2))) - 2*polylog3((2*np.sqrt(1 - (4*mt**2)/mA**2))/(1 + np.sqrt(1 - (4*mt**2)/mA**2))) + polylog3((1 - np.sqrt(1 - (4*mt**2)/mA**2))/(1 + np.sqrt(1 - (4*mt**2)/mA**2))) + polylog3((1 + np.sqrt(1 - (4*mt**2)/mA**2))/(1 - np.sqrt(1 - (4*mt**2)/mA**2))) + 5*Zeta(3)))))/(mt**7*np.sqrt(1 - (4*mt**2)/mA**2)*mtmsbar*(np.pi + np.complex(0.,1.)*np.log((1 + np.sqrt(1 - (4*mt**2)/mA**2))/(1 - np.sqrt(1 - (4*mt**2)/mA**2))))**2)).real
	elif reim == 1:
		return np.ascontiguousarray(((0. - 0.01688686394038963*np.complex(0.,1.))*(np.complex(0.,1.)*mt**3*(np.pi + np.complex(0.,1.)*np.log((1 + np.sqrt(1 - (4*mt**2)/mA**2))/(1 - np.sqrt(1 - (4*mt**2)/mA**2))))*(2 + np.complex(0.,1.)*np.sqrt(1 - (4*mt**2)/mA**2)*np.pi - np.sqrt(1 - (4*mt**2)/mA**2)*np.log((1 + np.sqrt(1 - (4*mt**2)/mA**2))/(1 - np.sqrt(1 - (4*mt**2)/mA**2))))*(-((mG**2 - msq1**2 + mt**2)*((mG**2 - msq1**2)*mtmsbar + mt**2*(-4*a*b*mG + mtmsbar))*np.pi**2*np.log(mG**2/msq1**2)) + np.pi**2*(-((mG**2 - msq2**2 + mt**2)*((mG**2 - msq2**2)*mtmsbar + mt**2*(4*a*b*mG + mtmsbar))*np.log(mG**2/msq2**2)) + 2*np.sqrt((mG**2 - msq1**2)**2 - 2*(mG**2 + msq1**2)*mt**2 + mt**4)*((mG**2 - msq1**2)*mtmsbar + mt**2*(-4*a*b*mG + mtmsbar))*np.log((mG**2 + msq1**2 - mt**2 + np.sqrt((mG**2 - msq1**2)**2 - 2*(mG**2 + msq1**2)*mt**2 + mt**4))/(2*mG*msq1)) + 2*(np.sqrt((mG**2 - msq2**2)**2 - 2*(mG**2 + msq2**2)*mt**2 + mt**4)*((mG**2 - msq2**2)*mtmsbar + mt**2*(4*a*b*mG + mtmsbar))*np.log((mG**2 + msq2**2 - mt**2 + np.sqrt((mG**2 - msq2**2)**2 - 2*(mG**2 + msq2**2)*mt**2 + mt**4))/(2*mG*msq2)) + mt**2*(2*mG**2*mtmsbar - msq1**2*mtmsbar - msq2**2*mtmsbar + 4*mt**2*mtmsbar + 4*np.euler_gamma*mt**2*mtmsbar + mt**2*mtmsbar*np.log(16) - mt**2*mtmsbar*np.log(4096) - 2*(mG**2 + 2*mt**2)*mtmsbar*np.log(mu**2/mG**2) - 4*a*b*mG*mt**2*np.log(mu**2/msq1**2) + mG**2*mtmsbar*np.log(mu**2/msq1**2) + mt**2*mtmsbar*np.log(mu**2/msq1**2) + 4*a*b*mG*mt**2*np.log(mu**2/msq2**2) + mG**2*mtmsbar*np.log(mu**2/msq2**2) + mt**2*mtmsbar*np.log(mu**2/msq2**2) - 2*mt**2*mtmsbar*np.log(mu**2/mt**2) - 4*mt**2*mtmsbar*np.log(np.pi))))) + mt**4*mtmsbar*np.pi**2*(-(mA**2*mt*np.sqrt(1 - (4*mt**2)/mA**2)*(-1 + np.sqrt(1 - (4*mt**2)/mA**2))*(1 + np.sqrt(1 - (4*mt**2)/mA**2))*(np.pi + np.complex(0.,1.)*np.log((1 + np.sqrt(1 - (4*mt**2)/mA**2))/(1 - np.sqrt(1 - (4*mt**2)/mA**2))))**2) + 4*mt**3*(np.pi + np.complex(0.,1.)*np.log((1 + np.sqrt(1 - (4*mt**2)/mA**2))/(1 - np.sqrt(1 - (4*mt**2)/mA**2))))*(-2*np.complex(0.,1.) + np.sqrt(1 - (4*mt**2)/mA**2)*np.pi + np.complex(0.,1.)*np.sqrt(1 - (4*mt**2)/mA**2)*np.log((1 + np.sqrt(1 - (4*mt**2)/mA**2))/(1 - np.sqrt(1 - (4*mt**2)/mA**2))))*(2*np.euler_gamma - np.log(mu**2/mG**2) - np.log((16*mu**2)/mt**2) - 2*np.log(np.pi)) + 8*mt**3*(np.log((2*np.sqrt(1 - (4*mt**2)/mA**2))/(-1 + np.sqrt(1 - (4*mt**2)/mA**2)))**2 - np.log((2*np.sqrt(1 - (4*mt**2)/mA**2))/(1 + np.sqrt(1 - (4*mt**2)/mA**2)))**2 - polylog2((1 - np.sqrt(1 - (4*mt**2)/mA**2))/(1 + np.sqrt(1 - (4*mt**2)/mA**2))) + polylog2((1 + np.sqrt(1 - (4*mt**2)/mA**2))/(1 - np.sqrt(1 - (4*mt**2)/mA**2)))) + 2*mA**2*mt*np.sqrt(1 - (4*mt**2)/mA**2)*(-1 + np.sqrt(1 - (4*mt**2)/mA**2))*(1 + np.sqrt(1 - (4*mt**2)/mA**2))*(np.log((2*np.sqrt(1 - (4*mt**2)/mA**2))/(1 + np.sqrt(1 - (4*mt**2)/mA**2)))**2*np.log((1 - np.sqrt(1 - (4*mt**2)/mA**2))/(1 + np.sqrt(1 - (4*mt**2)/mA**2))) + np.log((2*np.sqrt(1 - (4*mt**2)/mA**2))/(-1 + np.sqrt(1 - (4*mt**2)/mA**2)))**2*np.log((1 + np.sqrt(1 - (4*mt**2)/mA**2))/(1 - np.sqrt(1 - (4*mt**2)/mA**2))) + 2*np.log((2*np.sqrt(1 - (4*mt**2)/mA**2))/(-1 + np.sqrt(1 - (4*mt**2)/mA**2)))*polylog2((2*np.sqrt(1 - (4*mt**2)/mA**2))/(-1 + np.sqrt(1 - (4*mt**2)/mA**2))) + 2*np.log((2*np.sqrt(1 - (4*mt**2)/mA**2))/(1 + np.sqrt(1 - (4*mt**2)/mA**2)))*polylog2((2*np.sqrt(1 - (4*mt**2)/mA**2))/(1 + np.sqrt(1 - (4*mt**2)/mA**2))) - 2*polylog3((2*np.sqrt(1 - (4*mt**2)/mA**2))/(-1 + np.sqrt(1 - (4*mt**2)/mA**2))) - 2*polylog3((2*np.sqrt(1 - (4*mt**2)/mA**2))/(1 + np.sqrt(1 - (4*mt**2)/mA**2))) + polylog3((1 - np.sqrt(1 - (4*mt**2)/mA**2))/(1 + np.sqrt(1 - (4*mt**2)/mA**2))) + polylog3((1 + np.sqrt(1 - (4*mt**2)/mA**2))/(1 - np.sqrt(1 - (4*mt**2)/mA**2))) + 5*Zeta(3)))))/(mt**7*np.sqrt(1 - (4*mt**2)/mA**2)*mtmsbar*(np.pi + np.complex(0.,1.)*np.log((1 + np.sqrt(1 - (4*mt**2)/mA**2))/(1 - np.sqrt(1 - (4*mt**2)/mA**2))))**2)).imag

def ibpptotal(reim):
	if reim == 0:
		return ((0.6666666666666666*(2 + np.complex(0.,1.)*np.sqrt(1 - (4*mt**2)/mA**2)*np.pi - np.sqrt(1 - (4*mt**2)/mA**2)*np.log((1 + np.sqrt(1 - (4*mt**2)/mA**2))/(1 - np.sqrt(1 - (4*mt**2)/mA**2)))))/(np.sqrt(1 - (4*mt**2)/mA**2)*(np.pi + np.complex(0.,1.)*np.log((1 + np.sqrt(1 - (4*mt**2)/mA**2))/(1 - np.sqrt(1 - (4*mt**2)/mA**2)))))).real
	elif reim == 1:
		return ((0.6666666666666666*(2 + np.complex(0.,1.)*np.sqrt(1 - (4*mt**2)/mA**2)*np.pi - np.sqrt(1 - (4*mt**2)/mA**2)*np.log((1 + np.sqrt(1 - (4*mt**2)/mA**2))/(1 - np.sqrt(1 - (4*mt**2)/mA**2)))))/(np.sqrt(1 - (4*mt**2)/mA**2)*(np.pi + np.complex(0.,1.)*np.log((1 + np.sqrt(1 - (4*mt**2)/mA**2))/(1 - np.sqrt(1 - (4*mt**2)/mA**2)))))).imag
